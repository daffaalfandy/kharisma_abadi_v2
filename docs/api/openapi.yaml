openapi: 3.0.3
info:
  title: Kharisma Abadi API
  description: Multi-service cashier system API - Car Wash, Laundry, Carpet, Water Delivery
  version: 1.0.0
  contact:
    name: API Support
    email: support@kharisma-abadi.com
  license:
    name: MIT

servers:
  - url: http://localhost:3000/api/v1
    description: Local development server
  - url: https://staging-api.kharisma-abadi.com/api/v1
    description: Staging server
  - url: https://api.kharisma-abadi.com/api/v1
    description: Production server

tags:
  - name: Authentication
    description: User authentication and token management
  - name: Users
    description: User management (admin only)
  - name: Customers
    description: Customer information and management
  - name: Car Wash
    description: Car wash service operations
  - name: Laundry
    description: Laundry service operations
  - name: Carpet
    description: Carpet washing operations
  - name: Water Delivery
    description: Water delivery operations
  - name: Queue
    description: Service queue management
  - name: Payments
    description: Payment processing and management
  - name: Reports
    description: Reporting and analytics

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT bearer token. Use /auth/login to obtain.

  schemas:
    # Common Response Schemas
    SuccessResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: Response data (structure varies by endpoint)
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        message:
          type: string
          description: Optional success message

    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              enum:
                - VALIDATION_ERROR
                - AUTHENTICATION_FAILED
                - UNAUTHORIZED
                - INSUFFICIENT_PERMISSIONS
                - NOT_FOUND
                - CONFLICT
                - BUSINESS_RULE_VIOLATION
                - INTERNAL_ERROR
                - RATE_LIMIT_EXCEEDED
              example: VALIDATION_ERROR
            message:
              type: string
              example: Invalid request data
            details:
              type: array
              items:
                $ref: '#/components/schemas/ErrorDetail'

    ErrorDetail:
      type: object
      properties:
        field:
          type: string
          example: vehicleType
        message:
          type: string
          example: Invalid vehicle type
        code:
          type: string
          example: INVALID_ENUM

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 8

    # Entity Schemas
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: cashier01
        fullName:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        role:
          type: string
          enum: [admin, manager, cashier, service_staff, viewer]
          example: cashier
        isActive:
          type: boolean
          example: true
        lastLogin:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00Z
        createdAt:
          type: string
          format: date-time
          example: 2024-01-01T00:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00Z

    Customer:
      type: object
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          example: John Doe
        phone:
          type: string
          example: "08123456789"
        email:
          type: string
          format: email
          example: john@example.com
        address:
          type: string
          example: Jl. Merdeka No. 1
        city:
          type: string
          example: Jakarta
        customerType:
          type: string
          enum: [regular, vip, corporate]
          example: regular
        totalOrders:
          type: integer
          example: 15
        totalSpent:
          type: number
          format: double
          example: 1500000.00
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 456
        orderNumber:
          type: string
          example: CW-2024-00456
        customerId:
          type: integer
          example: 123
        customer:
          $ref: '#/components/schemas/CustomerSummary'
        serviceType:
          type: string
          enum: [car_wash, laundry, carpet, water_delivery]
          example: car_wash
        status:
          type: string
          enum: [pending, in_progress, completed, paid, closed, cancelled]
          example: pending
        pricing:
          type: object
          properties:
            subtotal:
              type: number
              format: double
              example: 100000.00
            discount:
              type: number
              format: double
              example: 15000.00
            tax:
              type: number
              format: double
              example: 0.00
            total:
              type: number
              format: double
              example: 85000.00
        notes:
          type: string
          example: Customer requested express service
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          $ref: '#/components/schemas/UserSummary'

    CarWashOrder:
      allOf:
        - $ref: '#/components/schemas/Order'
        - type: object
          properties:
            vehicleType:
              type: string
              example: sedan
            servicePackage:
              type: string
              example: premium
            addOns:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  price:
                    type: number
                    format: double
            licensePlate:
              type: string
              example: B1234XYZ

    Payment:
      type: object
      properties:
        id:
          type: integer
          example: 789
        orderId:
          type: integer
          example: 456
        orderNumber:
          type: string
          example: CW-2024-00456
        amount:
          type: number
          format: double
          example: 85000.00
        paymentMethod:
          type: string
          enum: [cash, card, bank_transfer, e_wallet]
          example: cash
        status:
          type: string
          enum: [pending, successful, failed, refunded]
          example: successful
        referenceNumber:
          type: string
          example: TRX123456789
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CustomerSummary:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        phone:
          type: string

    UserSummary:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        fullName:
          type: string

  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized - missing or invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Conflict:
      description: Conflict - resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    UnprocessableEntity:
      description: Unprocessable entity - business rule violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    TooManyRequests:
      description: Too many requests - rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and receive access and refresh tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: cashier01
                password:
                  type: string
                  format: password
                  example: SecurePassword123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        description: JWT access token (30 minutes expiry)
                      refreshToken:
                        type: string
                        description: JWT refresh token (7 days expiry)
                      tokenType:
                        type: string
                        example: Bearer
                      expiresIn:
                        type: integer
                        example: 1800
                        description: Seconds until access token expires
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout current user and invalidate tokens
      responses:
        '204':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Use refresh token to obtain new access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: Refresh token from login
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      tokenType:
                        type: string
                        example: Bearer
                      expiresIn:
                        type: integer
                        example: 1800
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get details of currently authenticated user
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      tags:
        - Users
      summary: List users
      description: Get paginated list of users (admin/manager only)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort
          in: query
          schema:
            type: string
            default: '-createdAt'
          description: Sort field with optional - prefix for descending
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Users
      summary: Create user
      description: Create new system user (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - fullName
                - email
                - role
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                password:
                  type: string
                  format: password
                  minLength: 8
                fullName:
                  type: string
                  minLength: 1
                  maxLength: 100
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [admin, manager, cashier, service_staff, viewer]
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Users
      summary: Update user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [admin, manager, cashier, service_staff, viewer]
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /customers:
    get:
      tags:
        - Customers
      summary: List customers
      description: Get paginated list of customers
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort
          in: query
          schema:
            type: string
            default: '-createdAt'
        - name: filter[name]
          in: query
          schema:
            type: string
          description: Filter by customer name
        - name: filter[phone]
          in: query
          schema:
            type: string
          description: Filter by customer phone
        - name: filter[customerType]
          in: query
          schema:
            type: string
            enum: [regular, vip, corporate]
          description: Filter by customer type
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Customers
      summary: Create customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - phone
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                phone:
                  type: string
                  pattern: '^[0-9\-+() ]{8,}$'
                email:
                  type: string
                  format: email
                address:
                  type: string
                city:
                  type: string
                customerType:
                  type: string
                  enum: [regular, vip, corporate]
                  default: regular
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /customers/{id}:
    get:
      tags:
        - Customers
      summary: Get customer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Customers
      summary: Update customer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                  format: email
                address:
                  type: string
                city:
                  type: string
                customerType:
                  type: string
                  enum: [regular, vip, corporate]
      responses:
        '200':
          description: Customer updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /car-wash/orders:
    get:
      tags:
        - Car Wash
      summary: List car wash orders
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          schema:
            type: string
            default: '-createdAt'
        - name: filter[status]
          in: query
          schema:
            type: string
            enum: [pending, in_progress, completed, paid, closed, cancelled]
        - name: filter[customerId]
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: List of car wash orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CarWashOrder'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Car Wash
      summary: Create car wash order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customerId
                - vehicleType
                - servicePackage
              properties:
                customerId:
                  type: integer
                vehicleType:
                  type: string
                  enum: [motorcycle, sedan, suv, truck, bus, truck_large]
                  example: sedan
                servicePackage:
                  type: string
                  enum: [basic, premium, deluxe]
                  example: premium
                addOns:
                  type: array
                  items:
                    type: string
                  example: [waxing, engine_cleaning]
                licensePlate:
                  type: string
                notes:
                  type: string
                discountCode:
                  type: string
      responses:
        '201':
          description: Car wash order created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/CarWashOrder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /car-wash/orders/{id}:
    get:
      tags:
        - Car Wash
      summary: Get car wash order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Car wash order details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/CarWashOrder'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /car-wash/orders/{id}/complete:
    patch:
      tags:
        - Car Wash
      summary: Complete car wash order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                notes:
                  type: string
      responses:
        '200':
          description: Order completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/CarWashOrder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /payments:
    get:
      tags:
        - Payments
      summary: List payments
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of payments
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Payments
      summary: Create payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - orderId
                - amount
                - paymentMethod
              properties:
                orderId:
                  type: integer
                amount:
                  type: number
                  format: double
                paymentMethod:
                  type: string
                  enum: [cash, card, bank_transfer, e_wallet]
                referenceNumber:
                  type: string
                notes:
                  type: string
      responses:
        '201':
          description: Payment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /payments/{id}:
    get:
      tags:
        - Payments
      summary: Get payment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reports/daily-sales:
    get:
      tags:
        - Reports
      summary: Get daily sales report
      parameters:
        - name: date
          in: query
          schema:
            type: string
            format: date
          description: Date for the report (YYYY-MM-DD)
      responses:
        '200':
          description: Daily sales report
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date
                      totalOrders:
                        type: integer
                      totalRevenue:
                        type: number
                        format: double
                      byService:
                        type: array
                        items:
                          type: object
                          properties:
                            service:
                              type: string
                            count:
                              type: integer
                            revenue:
                              type: number
                              format: double
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

